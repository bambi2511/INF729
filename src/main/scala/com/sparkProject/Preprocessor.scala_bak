package com.sparkProject

import org.apache.spark.SparkConf
import org.apache.spark.sql.SparkSession
import org.apache.spark.sql.functions.regexp_replace


object Preprocessor {

  def main(args: Array[String]): Unit = {

    val conf = new SparkConf().setAll(Map(
      "spark.scheduler.mode" -> "FIFO",
      "spark.speculation" -> "false",
      "spark.reducer.maxSizeInFlight" -> "48m",
      "spark.serializer" -> "org.apache.spark.serializer.KryoSerializer",
      "spark.kryoserializer.buffer.max" -> "1g",
      "spark.shuffle.file.buffer" -> "32k",
      "spark.default.parallelism" -> "12",
      "spark.sql.shuffle.partitions" -> "12"
    ))

    val spark = SparkSession
      .builder
      .config(conf)
      .appName("TP_spark")
      .getOrCreate()

    import spark.implicits._

    /*******************************************************************************
      *
      *       TP 2-3
      *
      *       - Charger un fichier csv dans un dataFrame
      *       - Pre-processing: cleaning, filters, feature engineering => filter, select, drop, na.fill, join, udf, distinct, count, describe, collect
      *       - Sauver le dataframe au format parquet
      *
      *       if problems with unimported modules => sbt plugins update
      *
      ********************************************************************************/

    val sc = spark.sparkContext
    /** 1 - CHARGEMENT DES DONNEES **/
    //val rdd = sc.textFile("/home/bambi/IdeaProjects/TP_ParisTech_2017_2018_starter/project/project/train.csv")
    //  .toDF("project_id","name","desc","goal","keywords","disable_communication","country","currency","deadline","state_changed_at,created_at","launched_at","backers_count","final_status")
    val df = spark.read
      .option("header", "true")
      .option("inferSchema", "true")
      .option("mode","PERMISSIVE") // DROPMALFORMED vs PERMISSIVE
      .csv("/home/bambi/IdeaProjects/TP_ParisTech_2017_2018_starter/project/project/train.csv")
    //val df2 = df.withColumn("replaced", regexp_replace($"value", "\"{2,}", " "))
    df.show()
    df.printSchema()
    df.describe().show()

    //val df2 = df.drop(col:)




    /** 2 - CLEANING **/


    /** FEATURE ENGINEERING: Ajouter et manipuler des colonnes **/


  }

}
